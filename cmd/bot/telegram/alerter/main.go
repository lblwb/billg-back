package alerter

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"sync"
	"time"
)

// TelegramAlerts –Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —ç—Ç–æ –∫–∞–∫ —Ç–∞–∫—É—é –≤–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
type TelegramAlerts struct {
	TgId                 string    `json:"tg_id"`                  //TgId –≤ —Ç–≥ –Ω–∞ –µ–≥–æ —á–∞—Ç (–ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –µ–≥–æ id)
	UserId               uint      `json:"user_id"`                //Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª_ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —Ç–≥
	UserServicesDeadline time.Time `json:"user_services_deadline"` //–°–µ—Ä–≤–∏—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π
}

type OrderedServices struct {
	ID           int
	DeadlineAt   time.Time
	ServicePrice float64
	Service      Service
	Order        UserOrderServices
	StatusSend   bool
}

type Service struct {
	Id         int
	Slug       string
	Name       string
	FullName   string
	DeviceName string
	DeviceSlug string
	BannerDesc string
	Tariffs    []string
}

type UserOrderServices struct {
	UserID      int
	TotalAmount float64
	PromoCode   string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Services    []string
}

func TgWorker() {

	//
	servicesExp := []OrderedServices{
		{
			ID:           1,
			DeadlineAt:   time.Now().Add(time.Second * 25),
			ServicePrice: 14620,
			Service:      Service{Id: 2, FullName: "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 2345"},
			Order:        UserOrderServices{UserID: 1, TotalAmount: 1000.00, Status: "completed"},
			StatusSend:   false,
		},
		{
			ID:           2,
			DeadlineAt:   time.Now().Add(time.Second * 50),
			ServicePrice: 12620,
			Service:      Service{Id: 2, FullName: "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 32"},
			Order:        UserOrderServices{UserID: 2, TotalAmount: 1000.00, Status: "completed"},
			StatusSend:   false,
		},
		{
			ID:           3,
			DeadlineAt:   time.Now().Add(time.Second * 120),
			ServicePrice: 14350,
			Service:      Service{Id: 2, FullName: "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä 43432"},
			Order:        UserOrderServices{UserID: 1, TotalAmount: 1000.00, Status: "completed"},
			StatusSend:   false,
		},
	}

	bot, err := tgbotapi.NewBotAPI("6899671515:AAFBMKrisGxrZxqmwlTvMHmNwDzYoHQhcmM")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 13

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil { // If we got a message
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			notifier := NewNotifier()
			notifier.ProcessServices(bot, servicesExp)

		}
	}
}

func Run() {
	//TgWorker()
}

type Notifier struct {
	wg               sync.WaitGroup
	notificationChan chan OrderedServices
}

func NewNotifier() *Notifier {
	return &Notifier{
		notificationChan: make(chan OrderedServices),
	}
}

func (n *Notifier) ProcessServices(bot *tgbotapi.BotAPI, servicesExp []OrderedServices) {
	for i, service := range servicesExp {
		n.wg.Add(1)
		go func(i int, service OrderedServices) {
			defer n.wg.Done()

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ DeadlineAt
			timeUntilDeadline := time.Until(service.DeadlineAt)
			if timeUntilDeadline > 0 {
				// –û–∂–∏–¥–∞–µ–º –¥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è DeadlineAt –ö–∞–∫-—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ)
				time.Sleep(timeUntilDeadline)
			}

			// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ service.Order.UserID

			// –ó–∞–≤–µ—Ä—à–∞–µ–º StatusSend
			servicesExp[i].StatusSend = true
			n.notificationChan <- service
		}(i, service)
	}

	go func() {
		n.wg.Wait()
		close(n.notificationChan)
	}()

	n.ProcessNotifications(bot)
}

func (n *Notifier) ProcessNotifications(bot *tgbotapi.BotAPI) {
	for serviceItemChan := range n.notificationChan {

		//
		fmt.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID %d\n", serviceItemChan.Order.UserID)
		messageFormat := fmt.Sprintf("üî•[%d] –°–∫–æ—Ä–æ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã! –£—Å–ª—É–≥–∏: %s / #%d / \n –ö –æ–ø–ª–∞—Ç–µ: %f", serviceItemChan.Order.UserID, serviceItemChan.Service.FullName, serviceItemChan.Service.Id, serviceItemChan.ServicePrice)

		keyboardText := "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
		//
		sendMessage(bot, 1248134771, messageFormat, true, keyboardText, fmt.Sprintf("https://rtyhost.com/bill/service/%d/pay", serviceItemChan.Order.UserID))
		tgbotapi.NewInlineKeyboardButtonURL("–ü–µ—Ä–µ–π—Ç–∏", "http://pay.ru/")
		//fmt.Println("–û—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ", userID)
	}
}

func sendMessage(bot *tgbotapi.BotAPI, chatId int64, textMsg string, keyboardShow bool, keyboardText, keyboardUrl string) int {
	msg := tgbotapi.NewMessage(chatId, textMsg)

	if keyboardShow {
		var numericKeyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL(keyboardText, keyboardUrl),
			),
		)

		msg.ReplyMarkup = numericKeyboard
		//msg.ReplyToMessageID = update.Message.MessageID
	}

	send, err := bot.Send(msg)
	if err != nil {
		_ = fmt.Errorf("%d", err)
	}
	return send.MessageID
}

func handleChatMessage() {
	// msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
	// msg.ReplyToMessageID = update.Message.MessageID
}
